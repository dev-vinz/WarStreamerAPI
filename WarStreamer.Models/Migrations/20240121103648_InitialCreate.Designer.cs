// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WarStreamer.Models.Context;

#nullable disable

namespace WarStreamer.Models.Migrations
{
    [DbContext(typeof(WarStreamerContext))]
    [Migration("20240121103648_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("SQL_Latin1_General_CP1_CS_AS")
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("WarStreamer.Models.Account", b =>
                {
                    b.Property<string>("Tag")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Tag");

                    b.HasIndex("UserId");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("WarStreamer.Models.AuthRefreshToken", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AesInitializationVector")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("ExpiresAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("IssuedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("TokenValue")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("AuthRefreshTokens");
                });

            modelBuilder.Entity("WarStreamer.Models.Font", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Fonts");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d2487fd7-67e4-479d-9ace-23d1befbec74"),
                            DisplayName = "Clash of Clans",
                            FileName = "supercell-magic.ttf"
                        },
                        new
                        {
                            Id = new Guid("16599ae9-4d07-4d90-9860-6708e78ba81a"),
                            DisplayName = "Poppins",
                            FileName = "poppins.otf"
                        },
                        new
                        {
                            Id = new Guid("899d8f05-9234-4de4-b5ff-f29f222775f1"),
                            DisplayName = "Quicksand",
                            FileName = "quicksand.otf"
                        },
                        new
                        {
                            Id = new Guid("7ee237c5-c4d7-4bf0-9c38-3c0fd79f5f1d"),
                            DisplayName = "Roboto",
                            FileName = "roboto.ttf"
                        });
                });

            modelBuilder.Entity("WarStreamer.Models.Image", b =>
                {
                    b.Property<Guid>("OverlaySettingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)")
                        .UseCollation("SQL_Latin1_General_CP1_CI_AS");

                    b.Property<int>("Height")
                        .HasColumnType("int");

                    b.Property<int>("LocationX")
                        .HasColumnType("int");

                    b.Property<int>("LocationY")
                        .HasColumnType("int");

                    b.Property<int>("Width")
                        .HasColumnType("int");

                    b.HasKey("OverlaySettingId", "Name");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("WarStreamer.Models.Language", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CultureInfo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DisplayValue")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FlagEmoji")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShortcutValue")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Languages");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a3af84a8-67b4-4919-97d4-5fe5742b7ad6"),
                            CultureInfo = "en-US",
                            DisplayValue = "English",
                            FlagEmoji = "🇬🇧",
                            ShortcutValue = "en"
                        },
                        new
                        {
                            Id = new Guid("f243d5a5-660f-4829-a82e-4c104eb04d5c"),
                            CultureInfo = "fr-FR",
                            DisplayValue = "Français",
                            FlagEmoji = "🇫🇷",
                            ShortcutValue = "fr"
                        });
                });

            modelBuilder.Entity("WarStreamer.Models.OverlaySetting", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<int?>("AverageDurationLocationX")
                        .HasColumnType("int");

                    b.Property<int?>("AverageDurationLocationY")
                        .HasColumnType("int");

                    b.Property<int?>("AverageDurationSize")
                        .HasColumnType("int");

                    b.Property<int?>("ClanNameLocationX")
                        .HasColumnType("int");

                    b.Property<int?>("ClanNameLocationY")
                        .HasColumnType("int");

                    b.Property<int?>("ClanNameSize")
                        .HasColumnType("int");

                    b.Property<Guid?>("FontId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsAverageDuration")
                        .HasColumnType("bit");

                    b.Property<bool>("IsClanName")
                        .HasColumnType("bit");

                    b.Property<bool>("IsLastAttackToWin")
                        .HasColumnType("bit");

                    b.Property<bool>("IsLogo")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPlayerDetails")
                        .HasColumnType("bit");

                    b.Property<bool>("IsTotalPercentage")
                        .HasColumnType("bit");

                    b.Property<bool>("IsTotalStars")
                        .HasColumnType("bit");

                    b.Property<int?>("LastAttackToWinLocationX")
                        .HasColumnType("int");

                    b.Property<int?>("LastAttackToWinLocationY")
                        .HasColumnType("int");

                    b.Property<int?>("LastAttackToWinSize")
                        .HasColumnType("int");

                    b.Property<int?>("LogoLocationX")
                        .HasColumnType("int");

                    b.Property<int?>("LogoLocationY")
                        .HasColumnType("int");

                    b.Property<int?>("LogoSize")
                        .HasColumnType("int");

                    b.Property<bool>("MirrorReflection")
                        .HasColumnType("bit");

                    b.Property<int?>("PlayerDetailsLocationX")
                        .HasColumnType("int");

                    b.Property<int?>("PlayerDetailsLocationY")
                        .HasColumnType("int");

                    b.Property<int?>("PlayerDetailsSize")
                        .HasColumnType("int");

                    b.Property<string>("TextColor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TotalPercentageLocationX")
                        .HasColumnType("int");

                    b.Property<int?>("TotalPercentageLocationY")
                        .HasColumnType("int");

                    b.Property<int?>("TotalPercentageSize")
                        .HasColumnType("int");

                    b.Property<int?>("TotalStarsLocationX")
                        .HasColumnType("int");

                    b.Property<int?>("TotalStarsLocationY")
                        .HasColumnType("int");

                    b.Property<int?>("TotalStarsSize")
                        .HasColumnType("int");

                    b.HasKey("UserId");

                    b.HasIndex("FontId");

                    b.ToTable("OverlaySettings");
                });

            modelBuilder.Entity("WarStreamer.Models.TeamLogo", b =>
                {
                    b.Property<string>("TeamName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("SQL_Latin1_General_CP1_CI_AS");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ClanTags")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TeamName", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("TeamLogos");
                });

            modelBuilder.Entity("WarStreamer.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("LanguageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("NewsLetter")
                        .HasColumnType("bit");

                    b.Property<long>("TierLevel")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("LanguageId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("WarStreamer.Models.WarOverlay", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("ClanTag")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsEnded")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset>("LastCheckout")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("UserId", "Id");

                    b.ToTable("WarOverlays");
                });

            modelBuilder.Entity("WarStreamer.Models.Account", b =>
                {
                    b.HasOne("WarStreamer.Models.User", "User")
                        .WithMany("Accounts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("WarStreamer.Models.Image", b =>
                {
                    b.HasOne("WarStreamer.Models.OverlaySetting", "OverlaySetting")
                        .WithMany("Images")
                        .HasForeignKey("OverlaySettingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OverlaySetting");
                });

            modelBuilder.Entity("WarStreamer.Models.OverlaySetting", b =>
                {
                    b.HasOne("WarStreamer.Models.Font", "Font")
                        .WithMany("OverlaySettings")
                        .HasForeignKey("FontId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("WarStreamer.Models.User", "User")
                        .WithOne("OverlaySetting")
                        .HasForeignKey("WarStreamer.Models.OverlaySetting", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Font");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WarStreamer.Models.TeamLogo", b =>
                {
                    b.HasOne("WarStreamer.Models.User", "User")
                        .WithMany("TeamLogos")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("WarStreamer.Models.User", b =>
                {
                    b.HasOne("WarStreamer.Models.Language", "Language")
                        .WithMany("Users")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Language");
                });

            modelBuilder.Entity("WarStreamer.Models.WarOverlay", b =>
                {
                    b.HasOne("WarStreamer.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("WarStreamer.Models.Font", b =>
                {
                    b.Navigation("OverlaySettings");
                });

            modelBuilder.Entity("WarStreamer.Models.Language", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("WarStreamer.Models.OverlaySetting", b =>
                {
                    b.Navigation("Images");
                });

            modelBuilder.Entity("WarStreamer.Models.User", b =>
                {
                    b.Navigation("Accounts");

                    b.Navigation("OverlaySetting");

                    b.Navigation("TeamLogos");
                });
#pragma warning restore 612, 618
        }
    }
}
