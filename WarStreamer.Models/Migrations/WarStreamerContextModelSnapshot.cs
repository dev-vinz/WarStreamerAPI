// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WarStreamer.Models.Context;

#nullable disable

namespace WarStreamer.Models.Migrations
{
    [DbContext(typeof(WarStreamerContext))]
    partial class WarStreamerContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("SQL_Latin1_General_CP1_CS_AS")
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("WarStreamer.Models.Account", b =>
                {
                    b.Property<string>("Tag")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Tag");

                    b.HasIndex("UserId");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("WarStreamer.Models.AuthToken", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AccessIV")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AccessToken")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DiscordIV")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DiscordToken")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("ExpiresAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("IssuedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("UserId");

                    b.ToTable("AuthTokens");
                });

            modelBuilder.Entity("WarStreamer.Models.Font", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FamilyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Fonts");

                    b.HasData(
                        new
                        {
                            Id = new Guid("07674fff-ac7f-4504-bf52-0de0702c578a"),
                            DisplayName = "Clash of Clans",
                            FamilyName = "Supercell-Magic",
                            FileName = "supercell-magic.ttf"
                        },
                        new
                        {
                            Id = new Guid("824a4925-7e82-45a0-ae0c-2e5f4b776fdc"),
                            DisplayName = "Poppins",
                            FamilyName = "Poppins",
                            FileName = "poppins.otf"
                        },
                        new
                        {
                            Id = new Guid("3bee4154-a692-48aa-8e62-94b2b349069b"),
                            DisplayName = "Quicksand",
                            FamilyName = "Quicksand",
                            FileName = "quicksand.otf"
                        },
                        new
                        {
                            Id = new Guid("b7c0af0a-d8ea-4fda-a872-3b7116890594"),
                            DisplayName = "Roboto",
                            FamilyName = "Roboto",
                            FileName = "roboto.ttf"
                        });
                });

            modelBuilder.Entity("WarStreamer.Models.Image", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)")
                        .UseCollation("SQL_Latin1_General_CP1_CI_AS");

                    b.Property<int>("Height")
                        .HasColumnType("int");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("bit");

                    b.Property<int>("LocationX")
                        .HasColumnType("int");

                    b.Property<int>("LocationY")
                        .HasColumnType("int");

                    b.Property<int>("Width")
                        .HasColumnType("int");

                    b.HasKey("UserId", "Name");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("WarStreamer.Models.Language", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CultureInfo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DisplayValue")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FlagEmoji")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShortcutValue")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Languages");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8e0bee00-fff2-40fb-bd99-3ef401f631fc"),
                            CultureInfo = "en-US",
                            DisplayValue = "English",
                            FlagEmoji = "🇬🇧",
                            ShortcutValue = "EN"
                        },
                        new
                        {
                            Id = new Guid("0f50c7de-d1a0-4fd0-b962-0498ba33bae8"),
                            CultureInfo = "fr-FR",
                            DisplayValue = "Français",
                            FlagEmoji = "🇫🇷",
                            ShortcutValue = "FR"
                        });
                });

            modelBuilder.Entity("WarStreamer.Models.OverlaySetting", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<int?>("AverageDurationLocationX")
                        .HasColumnType("int");

                    b.Property<int?>("AverageDurationLocationY")
                        .HasColumnType("int");

                    b.Property<int?>("AverageDurationSize")
                        .HasColumnType("int");

                    b.Property<int?>("ClanNameLocationX")
                        .HasColumnType("int");

                    b.Property<int?>("ClanNameLocationY")
                        .HasColumnType("int");

                    b.Property<int?>("ClanNameSize")
                        .HasColumnType("int");

                    b.Property<Guid?>("FontId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("HeroesEquipmentLocationX")
                        .HasColumnType("int");

                    b.Property<int?>("HeroesEquipmentLocationY")
                        .HasColumnType("int");

                    b.Property<int?>("HeroesEquipmentsSize")
                        .HasColumnType("int");

                    b.Property<bool>("IsAverageDuration")
                        .HasColumnType("bit");

                    b.Property<bool>("IsClanName")
                        .HasColumnType("bit");

                    b.Property<bool>("IsHeroesEquipments")
                        .HasColumnType("bit");

                    b.Property<bool>("IsLastAttackToWin")
                        .HasColumnType("bit");

                    b.Property<bool>("IsLogo")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPlayerDetails")
                        .HasColumnType("bit");

                    b.Property<bool>("IsTotalPercentage")
                        .HasColumnType("bit");

                    b.Property<bool>("IsTotalStars")
                        .HasColumnType("bit");

                    b.Property<int?>("LastAttackToWinLocationX")
                        .HasColumnType("int");

                    b.Property<int?>("LastAttackToWinLocationY")
                        .HasColumnType("int");

                    b.Property<int?>("LastAttackToWinSize")
                        .HasColumnType("int");

                    b.Property<int?>("LogoLocationX")
                        .HasColumnType("int");

                    b.Property<int?>("LogoLocationY")
                        .HasColumnType("int");

                    b.Property<int?>("LogoSize")
                        .HasColumnType("int");

                    b.Property<bool>("MirrorReflection")
                        .HasColumnType("bit");

                    b.Property<int?>("PlayerDetailsLocationX")
                        .HasColumnType("int");

                    b.Property<int?>("PlayerDetailsLocationY")
                        .HasColumnType("int");

                    b.Property<int?>("PlayerDetailsSize")
                        .HasColumnType("int");

                    b.Property<string>("TextColor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TotalPercentageLocationX")
                        .HasColumnType("int");

                    b.Property<int?>("TotalPercentageLocationY")
                        .HasColumnType("int");

                    b.Property<int?>("TotalPercentageSize")
                        .HasColumnType("int");

                    b.Property<int?>("TotalStarsLocationX")
                        .HasColumnType("int");

                    b.Property<int?>("TotalStarsLocationY")
                        .HasColumnType("int");

                    b.Property<int?>("TotalStarsSize")
                        .HasColumnType("int");

                    b.HasKey("UserId");

                    b.HasIndex("FontId");

                    b.ToTable("OverlaySettings");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("00000000-0000-0000-0000-000000000000"),
                            AverageDurationLocationX = 365,
                            AverageDurationLocationY = 330,
                            AverageDurationSize = 20,
                            ClanNameLocationX = 320,
                            ClanNameLocationY = 220,
                            ClanNameSize = 20,
                            FontId = new Guid("824a4925-7e82-45a0-ae0c-2e5f4b776fdc"),
                            HeroesEquipmentLocationX = 320,
                            HeroesEquipmentLocationY = 495,
                            HeroesEquipmentsSize = 120,
                            IsAverageDuration = true,
                            IsClanName = true,
                            IsHeroesEquipments = true,
                            IsLastAttackToWin = true,
                            IsLogo = true,
                            IsPlayerDetails = true,
                            IsTotalPercentage = true,
                            IsTotalStars = true,
                            LastAttackToWinLocationX = 320,
                            LastAttackToWinLocationY = 665,
                            LastAttackToWinSize = 14,
                            LogoLocationX = 320,
                            LogoLocationY = 100,
                            LogoSize = 100,
                            MirrorReflection = true,
                            PlayerDetailsLocationX = 320,
                            PlayerDetailsLocationY = 495,
                            PlayerDetailsSize = 120,
                            TextColor = "#FCFBF4",
                            TotalPercentageLocationX = 365,
                            TotalPercentageLocationY = 280,
                            TotalPercentageSize = 20,
                            TotalStarsLocationX = 270,
                            TotalStarsLocationY = 305,
                            TotalStarsSize = 50
                        },
                        new
                        {
                            UserId = new Guid("00000000-0000-0000-0000-000000000001"),
                            AverageDurationLocationX = 365,
                            AverageDurationLocationY = 150,
                            AverageDurationSize = 20,
                            ClanNameLocationX = 320,
                            ClanNameLocationY = 215,
                            ClanNameSize = 20,
                            FontId = new Guid("07674fff-ac7f-4504-bf52-0de0702c578a"),
                            IsAverageDuration = true,
                            IsClanName = true,
                            IsHeroesEquipments = false,
                            IsLastAttackToWin = true,
                            IsLogo = false,
                            IsPlayerDetails = false,
                            IsTotalPercentage = true,
                            IsTotalStars = true,
                            LastAttackToWinLocationX = 320,
                            LastAttackToWinLocationY = 285,
                            LastAttackToWinSize = 10,
                            MirrorReflection = false,
                            TextColor = "#FCFBF4",
                            TotalPercentageLocationX = 270,
                            TotalPercentageLocationY = 150,
                            TotalPercentageSize = 20,
                            TotalStarsLocationX = 320,
                            TotalStarsLocationY = 60,
                            TotalStarsSize = 60
                        },
                        new
                        {
                            UserId = new Guid("00000000-0000-0000-0000-000000000002"),
                            AverageDurationLocationX = 560,
                            AverageDurationLocationY = 370,
                            AverageDurationSize = 20,
                            ClanNameLocationX = 390,
                            ClanNameLocationY = 370,
                            ClanNameSize = 20,
                            FontId = new Guid("3bee4154-a692-48aa-8e62-94b2b349069b"),
                            IsAverageDuration = true,
                            IsClanName = true,
                            IsHeroesEquipments = false,
                            IsLastAttackToWin = false,
                            IsLogo = true,
                            IsPlayerDetails = true,
                            IsTotalPercentage = true,
                            IsTotalStars = true,
                            LogoLocationX = 390,
                            LogoLocationY = 220,
                            LogoSize = 120,
                            MirrorReflection = true,
                            PlayerDetailsLocationX = 460,
                            PlayerDetailsLocationY = 505,
                            PlayerDetailsSize = 100,
                            TextColor = "#FCFBF4",
                            TotalPercentageLocationX = 550,
                            TotalPercentageLocationY = 295,
                            TotalPercentageSize = 30,
                            TotalStarsLocationX = 560,
                            TotalStarsLocationY = 190,
                            TotalStarsSize = 60
                        });
                });

            modelBuilder.Entity("WarStreamer.Models.TeamLogo", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TeamName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("SQL_Latin1_General_CP1_CI_AS");

                    b.Property<string>("ClanTags")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "TeamName");

                    b.ToTable("TeamLogos");
                });

            modelBuilder.Entity("WarStreamer.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("LanguageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("NewsLetter")
                        .HasColumnType("bit");

                    b.Property<long>("TierLevel")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("LanguageId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000000"),
                            LanguageId = new Guid("8e0bee00-fff2-40fb-bd99-3ef401f631fc"),
                            NewsLetter = false,
                            TierLevel = 0L
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000001"),
                            LanguageId = new Guid("8e0bee00-fff2-40fb-bd99-3ef401f631fc"),
                            NewsLetter = false,
                            TierLevel = 0L
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000002"),
                            LanguageId = new Guid("8e0bee00-fff2-40fb-bd99-3ef401f631fc"),
                            NewsLetter = false,
                            TierLevel = 0L
                        });
                });

            modelBuilder.Entity("WarStreamer.Models.WarOverlay", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ClanTag")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsEnded")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset>("LastCheckout")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("UserId", "Id");

                    b.ToTable("WarOverlays");
                });

            modelBuilder.Entity("WarStreamer.Models.Account", b =>
                {
                    b.HasOne("WarStreamer.Models.User", "User")
                        .WithMany("Accounts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("WarStreamer.Models.AuthToken", b =>
                {
                    b.HasOne("WarStreamer.Models.User", "User")
                        .WithOne("AuthToken")
                        .HasForeignKey("WarStreamer.Models.AuthToken", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("WarStreamer.Models.Image", b =>
                {
                    b.HasOne("WarStreamer.Models.User", "User")
                        .WithMany("Images")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("WarStreamer.Models.OverlaySetting", b =>
                {
                    b.HasOne("WarStreamer.Models.Font", "Font")
                        .WithMany("OverlaySettings")
                        .HasForeignKey("FontId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("WarStreamer.Models.User", "User")
                        .WithOne("OverlaySetting")
                        .HasForeignKey("WarStreamer.Models.OverlaySetting", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Font");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WarStreamer.Models.TeamLogo", b =>
                {
                    b.HasOne("WarStreamer.Models.User", "User")
                        .WithMany("TeamLogos")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("WarStreamer.Models.User", b =>
                {
                    b.HasOne("WarStreamer.Models.Language", "Language")
                        .WithMany("Users")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Language");
                });

            modelBuilder.Entity("WarStreamer.Models.WarOverlay", b =>
                {
                    b.HasOne("WarStreamer.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("WarStreamer.Models.Font", b =>
                {
                    b.Navigation("OverlaySettings");
                });

            modelBuilder.Entity("WarStreamer.Models.Language", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("WarStreamer.Models.User", b =>
                {
                    b.Navigation("Accounts");

                    b.Navigation("AuthToken")
                        .IsRequired();

                    b.Navigation("Images");

                    b.Navigation("OverlaySetting");

                    b.Navigation("TeamLogos");
                });
#pragma warning restore 612, 618
        }
    }
}
